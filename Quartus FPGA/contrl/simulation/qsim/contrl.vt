// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2023 19:19:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    contrl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contrl_vlg_sample_tst(
	clk,
	hum_in,
	rst_n,
	sun_in,
	tem_in,
	water_in,
	sampler_tx
);
input  clk;
input [7:0] hum_in;
input  rst_n;
input [7:0] sun_in;
input [7:0] tem_in;
input [7:0] water_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or hum_in or rst_n or sun_in or tem_in or water_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module contrl_vlg_check_tst (
	hum_low,
	pump,
	sun_high,
	tem_high,
	tem_low,
	water_low,
	sampler_rx
);
input  hum_low;
input  pump;
input  sun_high;
input  tem_high;
input  tem_low;
input  water_low;
input sampler_rx;

reg  hum_low_expected;
reg  pump_expected;
reg  sun_high_expected;
reg  tem_high_expected;
reg  tem_low_expected;
reg  water_low_expected;

reg  hum_low_prev;
reg  pump_prev;
reg  sun_high_prev;
reg  tem_high_prev;
reg  tem_low_prev;
reg  water_low_prev;

reg  hum_low_expected_prev;
reg  pump_expected_prev;
reg  sun_high_expected_prev;
reg  tem_high_expected_prev;
reg  tem_low_expected_prev;
reg  water_low_expected_prev;

reg  last_hum_low_exp;
reg  last_pump_exp;
reg  last_sun_high_exp;
reg  last_tem_high_exp;
reg  last_tem_low_exp;
reg  last_water_low_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	hum_low_prev = hum_low;
	pump_prev = pump;
	sun_high_prev = sun_high;
	tem_high_prev = tem_high;
	tem_low_prev = tem_low;
	water_low_prev = water_low;
end

// update expected /o prevs

always @(trigger)
begin
	hum_low_expected_prev = hum_low_expected;
	pump_expected_prev = pump_expected;
	sun_high_expected_prev = sun_high_expected;
	tem_high_expected_prev = tem_high_expected;
	tem_low_expected_prev = tem_low_expected;
	water_low_expected_prev = water_low_expected;
end



// expected tem_low
initial
begin
	tem_low_expected = 1'bX;
end 

// expected tem_high
initial
begin
	tem_high_expected = 1'bX;
end 

// expected hum_low
initial
begin
	hum_low_expected = 1'bX;
end 

// expected sun_high
initial
begin
	sun_high_expected = 1'bX;
end 

// expected water_low
initial
begin
	water_low_expected = 1'bX;
end 

// expected pump
initial
begin
	pump_expected = 1'bX;
end 
// generate trigger
always @(hum_low_expected or hum_low or pump_expected or pump or sun_high_expected or sun_high or tem_high_expected or tem_high or tem_low_expected or tem_low or water_low_expected or water_low)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hum_low = %b | expected pump = %b | expected sun_high = %b | expected tem_high = %b | expected tem_low = %b | expected water_low = %b | ",hum_low_expected_prev,pump_expected_prev,sun_high_expected_prev,tem_high_expected_prev,tem_low_expected_prev,water_low_expected_prev);
	$display("| real hum_low = %b | real pump = %b | real sun_high = %b | real tem_high = %b | real tem_low = %b | real water_low = %b | ",hum_low_prev,pump_prev,sun_high_prev,tem_high_prev,tem_low_prev,water_low_prev);
`endif
	if (
		( hum_low_expected_prev !== 1'bx ) && ( hum_low_prev !== hum_low_expected_prev )
		&& ((hum_low_expected_prev !== last_hum_low_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hum_low :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hum_low_expected_prev);
		$display ("     Real value = %b", hum_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hum_low_exp = hum_low_expected_prev;
	end
	if (
		( pump_expected_prev !== 1'bx ) && ( pump_prev !== pump_expected_prev )
		&& ((pump_expected_prev !== last_pump_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pump_expected_prev);
		$display ("     Real value = %b", pump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pump_exp = pump_expected_prev;
	end
	if (
		( sun_high_expected_prev !== 1'bx ) && ( sun_high_prev !== sun_high_expected_prev )
		&& ((sun_high_expected_prev !== last_sun_high_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sun_high :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sun_high_expected_prev);
		$display ("     Real value = %b", sun_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sun_high_exp = sun_high_expected_prev;
	end
	if (
		( tem_high_expected_prev !== 1'bx ) && ( tem_high_prev !== tem_high_expected_prev )
		&& ((tem_high_expected_prev !== last_tem_high_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tem_high :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tem_high_expected_prev);
		$display ("     Real value = %b", tem_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tem_high_exp = tem_high_expected_prev;
	end
	if (
		( tem_low_expected_prev !== 1'bx ) && ( tem_low_prev !== tem_low_expected_prev )
		&& ((tem_low_expected_prev !== last_tem_low_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tem_low :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tem_low_expected_prev);
		$display ("     Real value = %b", tem_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tem_low_exp = tem_low_expected_prev;
	end
	if (
		( water_low_expected_prev !== 1'bx ) && ( water_low_prev !== water_low_expected_prev )
		&& ((water_low_expected_prev !== last_water_low_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port water_low :: @time = %t",  $realtime);
		$display ("     Expected value = %b", water_low_expected_prev);
		$display ("     Real value = %b", water_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_water_low_exp = water_low_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module contrl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] hum_in;
reg rst_n;
reg [7:0] sun_in;
reg [7:0] tem_in;
reg [7:0] water_in;
// wires                                               
wire hum_low;
wire pump;
wire sun_high;
wire tem_high;
wire tem_low;
wire water_low;

wire sampler;                             

// assign statements (if any)                          
contrl i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.hum_in(hum_in),
	.hum_low(hum_low),
	.pump(pump),
	.rst_n(rst_n),
	.sun_high(sun_high),
	.sun_in(sun_in),
	.tem_high(tem_high),
	.tem_in(tem_in),
	.tem_low(tem_low),
	.water_in(water_in),
	.water_low(water_low)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #40000 1'b1;
end 
// tem_in[ 7 ]
initial
begin
	tem_in[7] = 1'b0;
	tem_in[7] = #40000 1'b1;
	tem_in[7] = #60000 1'b0;
end 
// tem_in[ 6 ]
initial
begin
	tem_in[6] = 1'b0;
	tem_in[6] = #40000 1'b1;
	tem_in[6] = #60000 1'b0;
	tem_in[6] = #60000 1'b1;
	tem_in[6] = #180000 1'b0;
end 
// tem_in[ 5 ]
initial
begin
	tem_in[5] = 1'b0;
end 
// tem_in[ 4 ]
initial
begin
	tem_in[4] = 1'b0;
end 
// tem_in[ 3 ]
initial
begin
	tem_in[3] = 1'b0;
end 
// tem_in[ 2 ]
initial
begin
	tem_in[2] = 1'b0;
end 
// tem_in[ 1 ]
initial
begin
	tem_in[1] = 1'b0;
end 
// tem_in[ 0 ]
initial
begin
	tem_in[0] = 1'b0;
end 
// hum_in[ 7 ]
initial
begin
	hum_in[7] = 1'b0;
	hum_in[7] = #40000 1'b1;
	hum_in[7] = #240000 1'b0;
end 
// hum_in[ 6 ]
initial
begin
	hum_in[6] = 1'b0;
end 
// hum_in[ 5 ]
initial
begin
	hum_in[5] = 1'b0;
	hum_in[5] = #280000 1'b1;
	hum_in[5] = #60000 1'b0;
end 
// hum_in[ 4 ]
initial
begin
	hum_in[4] = 1'b0;
end 
// hum_in[ 3 ]
initial
begin
	hum_in[3] = 1'b0;
end 
// hum_in[ 2 ]
initial
begin
	hum_in[2] = 1'b0;
end 
// hum_in[ 1 ]
initial
begin
	hum_in[1] = 1'b0;
end 
// hum_in[ 0 ]
initial
begin
	hum_in[0] = 1'b0;
end 
// sun_in[ 7 ]
initial
begin
	sun_in[7] = 1'b0;
	sun_in[7] = #220000 1'b1;
	sun_in[7] = #120000 1'b0;
end 
// sun_in[ 6 ]
initial
begin
	sun_in[6] = 1'b0;
	sun_in[6] = #40000 1'b1;
	sun_in[6] = #180000 1'b0;
end 
// sun_in[ 5 ]
initial
begin
	sun_in[5] = 1'b0;
	sun_in[5] = #220000 1'b1;
	sun_in[5] = #120000 1'b0;
end 
// sun_in[ 4 ]
initial
begin
	sun_in[4] = 1'b0;
end 
// sun_in[ 3 ]
initial
begin
	sun_in[3] = 1'b0;
end 
// sun_in[ 2 ]
initial
begin
	sun_in[2] = 1'b0;
end 
// sun_in[ 1 ]
initial
begin
	sun_in[1] = 1'b0;
end 
// sun_in[ 0 ]
initial
begin
	sun_in[0] = 1'b0;
end 
// water_in[ 7 ]
initial
begin
	water_in[7] = 1'b0;
	water_in[7] = #40000 1'b1;
	water_in[7] = #180000 1'b0;
	water_in[7] = #60000 1'b1;
	water_in[7] = #60000 1'b0;
end 
// water_in[ 6 ]
initial
begin
	water_in[6] = 1'b0;
	water_in[6] = #40000 1'b1;
	water_in[6] = #180000 1'b0;
	water_in[6] = #60000 1'b1;
	water_in[6] = #60000 1'b0;
end 
// water_in[ 5 ]
initial
begin
	water_in[5] = 1'b0;
	water_in[5] = #40000 1'b1;
	water_in[5] = #180000 1'b0;
	water_in[5] = #60000 1'b1;
	water_in[5] = #60000 1'b0;
end 
// water_in[ 4 ]
initial
begin
	water_in[4] = 1'b0;
	water_in[4] = #40000 1'b1;
	water_in[4] = #180000 1'b0;
	water_in[4] = #60000 1'b1;
	water_in[4] = #60000 1'b0;
end 
// water_in[ 3 ]
initial
begin
	water_in[3] = 1'b0;
	water_in[3] = #40000 1'b1;
	water_in[3] = #300000 1'b0;
end 
// water_in[ 2 ]
initial
begin
	water_in[2] = 1'b0;
	water_in[2] = #40000 1'b1;
	water_in[2] = #300000 1'b0;
end 
// water_in[ 1 ]
initial
begin
	water_in[1] = 1'b0;
	water_in[1] = #40000 1'b1;
	water_in[1] = #300000 1'b0;
end 
// water_in[ 0 ]
initial
begin
	water_in[0] = 1'b0;
	water_in[0] = #40000 1'b1;
	water_in[0] = #300000 1'b0;
end 

contrl_vlg_sample_tst tb_sample (
	.clk(clk),
	.hum_in(hum_in),
	.rst_n(rst_n),
	.sun_in(sun_in),
	.tem_in(tem_in),
	.water_in(water_in),
	.sampler_tx(sampler)
);

contrl_vlg_check_tst tb_out(
	.hum_low(hum_low),
	.pump(pump),
	.sun_high(sun_high),
	.tem_high(tem_high),
	.tem_low(tem_low),
	.water_low(water_low),
	.sampler_rx(sampler)
);
endmodule

